DDA_M:

#include<iostream>
#include<GL/glut.h>
#include<windows.h>

using namespace std;
const int windowWidth = 600;
const int windowHeight=600;
int x1,x2,y1,y2;

void drawlineM()
{
    float dx=x2-x1;
    float dy=dy-y1;


    int steps = abs(dx) > abs(dy) ? abs(dx) : abs(dy);


    float m = dy/dx ;

    float m1=abs(m);

    float xIncrement , yIncrement;



    if(m>=0 && m <=1  && dx >=0 && dy>=0)
    {

        xIncrement = 1;
        yIncrement=m1;
    }
 else  if(m>=0 && m <=1  && dx  < 0 && dy < 0)
    {

        xIncrement =-1;
        yIncrement=-m1;
    }

   else   if(m>= -1 && m < 0  && dx > 0 && dy < 0)
    {

        xIncrement = 1;
        yIncrement=- m1;
    }
    else if(m >= -1 && m < 0 && dx < 0 && dy > 0)
    {

        xIncrement = -1;
        yIncrement = m1;
    }
      else if(m > 1 && dx > 0 && dy > 0)
    {
        xIncrement = 1 / m1;
        yIncrement = 1;
    }

      else if(m > 1 && dx < 0 && dy < 0)
    {
        xIncrement = -(1 / m1);
        yIncrement = -1;
    }
     else if(m < -1 && dx > 0 && dy < 0)
    {

        xIncrement = 1 / m1;
        yIncrement = -1;
    }
     else if(m < -1 && dx < 0 && dy  > 0)
    {

        xIncrement = -(1 / m1);
        yIncrement = 1;
    }

    glBegin(GL_POINTS);

    float x=x1;
    float y=y1;

    for(int i=0; i<=steps ; i++)
    {

        glVertex2i(x,y);
        cout << x << "  " << y;

        x= x+xIncrement;
        y=y+yIncrement;
    }

    glEnd();

}

void display()
{

    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0,1.0,0.0);
    glPointSize(3.0); // first does not use point size 3.0
    drawlineM();
    glFlush();
}

void init()
{

    glClearColor(0.0,0.0,0.0,0.1);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0,200, 0, 200);



}


int main(int argc , char *argv[])
{

    cout << "Enter the values of startX and startY: ";
    cin >> x1 >> y1;
    cout << "Enter the values of endX and endY: ";
    cin >> x2 >> y2;


    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE| GLUT_RGB);

    glutInitWindowPosition(100,100);
    glutInitWindowSize(windowWidth, windowHeight);
    glutCreateWindow("DDA Line Drawing With M");


    init();

    glutDisplayFunc(display);

    glutMainLoop();

    return 0;


}

Bresenham's:

#include<iostream>
#include<GL/glut.h>
#include<windows.h>

using namespace std;
 int x1,x2,y1,y2;

const int windowWidth=650;
const int windowHeight=650;

void BresenhamLine()
{
      int dx=abs(x2-x1);
      int dy= abs(y2-y1);


      int x, y , xNext , yNext;


      float m = abs(dy/dx);


      if(m<1)
      {

          int p =2*dy-dx;

          int twoDY=2*dy;
          int twoDYDx=2 *(dy-dx);



          if(x1>x2)
          {

              x=x2;
              y=y2;
              xNext=x1;

          }

          else
          {

              x=x1;
              y=y1;
              xNext=x2;
          }

          glBegin(GL_POINTS);
          glVertex2i(x,y);

          while(x != xNext)
          {

              x++;

              if(p<0)
              {

                  p=p+twoDY;

              }
              else
              {

                  y++;
                  p=p+twoDYDx;
              }
              glVertex2i(x,y);
              cout  << x << " "  << y;
          }


          glEnd();

      }

      else

      {

               int p =2*dy-dx;

          int twoDx=2*dx;
          int twoDxDy=2 *(dx-dy);



          if(y1>y2)
          {

              x=x2;
              y=y2;
              yNext=y1;

          }

          else
          {

              x=x1;
              y=y1;
              yNext=y2;
          }

          glBegin(GL_POINTS);
          glVertex2i(x,y);

          while(y != yNext)
          {

              y++;

              if(p<0)
              {

                  p=p+twoDx;

              }
              else
              {

                  y++;
                  p=p+twoDxDy;
              }
              glVertex2i(x,y);
              cout << x << " "  << y;
          }


          glEnd();



      }

}

void display()
{

    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0,1.0,0.0);
    glPointSize(3.0);
    BresenhamLine();
    glFlush();



}

void init()
{

    glClearColor(0.0,0.0,0.0,1.0);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0.0,windowWidth, 0.0, windowHeight);
}





int main(int argc , char *argv[])
{
    cout << "Enter the values of x1 and y1: " << endl;
    cin >> x1>> y1;
    cout << "Enter the values of x2 and y2: " << endl;
    cin >> x2 >> y2;

    glutInit(&argc , argv);
    glutInitWindowSize(650,650);
    glutInitWindowPosition(100,100);
    glutInitDisplayMode(GLUT_SINGLE |GLUT_RGB);


    init();

    glutDisplayFunc(display);

    glutMainLoop();

   return EXIT_SUCCESS;



}

Mid_Point:

#include <GL/glut.h>
#include <iostream>


float x_center, y_center, radius;

void drawPixel(float x, float y)
{
    std::cout << "Pixel at: " << x << " " << y << std::endl;
    glBegin(GL_POINTS);
    glVertex2f(x, y);
    glEnd();
}

void drawMidPointCircle(float x_center, float y_center, float r)
{
    if (r < 0)
        return;

    int x = r, y = 0;
    int p = 1 - r;


    drawPixel(x + x_center, y + y_center);


    while (x > y)
    {
        y++;


        if (p <= 0)
        {
            p = p + 2 * y + 1;
        }
        else
        {
            x--;
            p = p + 2 * y - 2 * x + 1;
        }


        if (x < y)
            break;


        drawPixel(x + x_center, y + y_center);
        drawPixel(x + x_center, -y + y_center);
        drawPixel(-x + x_center, -y + y_center);
        drawPixel(-x + x_center, y + y_center);
        drawPixel(y + x_center, x + y_center);
        drawPixel(y + x_center, -x + y_center);
        drawPixel(-y + x_center, -x + y_center);
        drawPixel(-y + x_center, x + y_center);
    }
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 1.0, 1.0);
    glPointSize(3);


    drawMidPointCircle(x_center, y_center, radius);

    glFlush();
}

void init()
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-100.0, 100.0, -100.0, 100.0, -1.0, 1.0);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char **argv)
{

    std::cout << "Enter the center of the circle (x_center, y_center): ";
    std::cin >> x_center >> y_center;

    std::cout << "Enter the radius of the circle: ";
    std::cin >> radius;


    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(500, 500);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Midpoint Circle Drawing");
    glClearColor(0.0, 0.0, 0.0, 0.0);
    init();
    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}

Transformation:


#include <iostream>
#include <vector>
#include <cmath>
#include <GL/glut.h>
using namespace std;
struct Point
{
    float x, y;
};
vector<Point> original;
vector<Point> transformed;

void drawPolygon(const std::vector<Point>& vertices) {
    glBegin(GL_POLYGON);
    for (const auto& vertex : vertices) {
        glVertex2f(vertex.x, vertex.y);
    }
    glEnd();
}
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    glColor3f(1.0, 0.0, 0.0);
    drawPolygon(original);
    glColor3f(0.0, 1.0, 0.0);
    drawPolygon(transformed);
    glFlush();
}

void initialize()
{
    glClearColor(0.0, 0.0, 0.0, 1.0);
    gluOrtho2D(-100, 100, -100, 100);
}

void applyTranslation(float tx, float ty)
{
    transformed.clear();
    for (const auto& pt : original)
    {
        Point newPt;
        newPt.x = pt.x + tx;
        newPt.y = pt.y + ty;
        transformed.push_back(newPt);
    }
}
void applyScaling(float sx, float sy, float fx, float fy)
{
    transformed.clear();
    for (const auto& pt : original)
    {
        Point newPt;
        newPt.x = (pt.x - fx) * sx + fx;
        newPt.y = (pt.y - fy) * sy + fy;
        transformed.push_back(newPt);
    }
}

void applyRotation(float angle, int pivotX, int pivotY)
{
    transformed.clear();
    float radianAngle = (angle * 3.1416) / 180.0;
    for (const auto& p : original)
    {

        float translateX = p.x - pivotX;
        float translateY = p.y - pivotY;

        float rotationX = translateX * cos(radianAngle) - translateY * sin(radianAngle);
        float rotationY = translateX * sin(radianAngle) + translateY * cos(radianAngle);
        Point newPoint;
        newPoint.x = rotationX + pivotX;
        newPoint.y = rotationY + pivotY;
        transformed.push_back(newPoint);
    }
}
void applyReflection(char option)
{
     transformed.clear();
    for (const auto& p : original)
    {
        Point newPoint;
        if(option == 'a')
        {
            newPoint.x = p.x;
            newPoint.y = -p.y;

        }
        else if(option == 'b')
        {
           newPoint.x = -p.x;
           newPoint.y = p.y;
        }
        else if(option == 'c')
        {
           newPoint.x = p.y;
           newPoint.y = p.x;
        }
        else
        {
          newPoint.x = -p.x;
          newPoint.y = -p.y;
        }

        transformed.push_back(newPoint);

    }

}
void applyShearing(float sh, char option)
{
    transformed.clear();
    for (const auto& p : original)
    {

        Point newPoint;
        if(option == 'X')
        {
            newPoint.x = p.x + (sh * p.y);
            newPoint.y = p.y;
        }
        else
        {
          newPoint.x = p.x;
          newPoint.y = p.y + (sh * p.x);
        }

        transformed.push_back(newPoint);
    }

}

int main(int argc, char** argv) {
    cout << "2D Geometric Transformation" << endl;
    cout << "........................................" << endl;
    cout << "1. Translation " << endl;
    cout << "2. Scaling (Fixed Point)" << endl;
    cout << "3. Rotation (Rotation / Pivot Point)" << endl;
    cout << "4. Reflection " << endl;
    cout << "5. Shearing" << endl;
    cout << "6. Quit" << endl;
    cout << "Enter your option: ";
    int option;
    cin >> option;
    switch (option)
    {
        case 1:
            {
            cout << "Translation" << endl;
            int n;
            cout << "Enter the number of vertices: ";
            cin >> n;

            original.resize(n);
            for (int i = 0; i < n; ++i) {
                cout << "Enter the coordinates of each vertex (x y): " << i + 1 << endl;
                cin >> original[i].x >> original[i].y;
            }

            float tx, ty;
            cout << "Enter translation factors (tx ty): ";
            cin >> tx >> ty;
            applyTranslation(tx, ty);
            break;
        }
         case 2:
          {
            cout << "Scaling" << endl;
            int n;
            cout << "Enter the number of edges of the polygon: ";
            cin >> n;

            original.resize(n);
            for (int i = 0; i < n; ++i) {
                cout << "Enter the coordinates of each vertex (x y): " << i + 1 << endl;
                cin >> original[i].x >> original[i].y;
            }

            float sx, sy, fx, fy;
            cout << "Enter the value of Scaling factor (SX, SY) :" << endl;
            cin >> sx >> sy;
            cout << "Enter the fixed point (fX, fY): " << endl;
            cin >> fx >> fx;
            applyScaling(sx, sy, fx, fy);
            break;
        }

        case 3:
         {
            cout << "Rotation" << endl;
            int n;
            cout << "Enter the number of edges of the polygon: ";
            cin >> n;

            original.resize(n);
            for (int i = 0; i < n; ++i) {
                cout << "Enter the coordinates of each vertex (x y): " << i + 1 << endl;
                cin >> original[i].x >> original[i].y;
            }

            float angle, xr, yr;
            cout << "Enter the value of the Theta (Angle) for Rotation (Degree):" << endl;
            cin >> angle;
            cout << "Enter the Pivot/Rotation point (xr, yr): " << endl;
            cin >> xr >> yr;
            applyRotation(angle, xr, yr);
            break;
        }
        case 4:
        {
        cout << "Reflection" << endl;
        int n;
        cout << "Enter the number of edges of the polygon: ";
        cin >> n;

        original.resize(n);
        for (int i = 0; i < n; ++i) {
            cout << "Enter the coordinates of each vertex (x y): " << i + 1 << endl;
            cin >> original[i].x >> original[i].y;
        }
        char axis;
        cout << "Enter the axis of reflection (a for x-axis, b for y-axis, c for origin, d for X=Y axis): ";
        cin >> axis;

        applyReflection(axis);
        break;
        }
        case 5:
        {
        cout << "Shearing" << endl;
        int n;
        cout << "Enter the number of edges of the polygon: ";
        cin >> n;

        original.resize(n);
        for (int i = 0; i < n; ++i) {
            cout << "Enter the coordinates of each vertex (x y): " << i + 1 << endl;
            cin >> original[i].x >> original[i].y;
        }
        float sh;
        char axis;
        cout << "Enter the shearing factors (X for x-axis, Y for y-axis): ";
        cin >> axis;
        cout << "Enter the Shearing value : " << endl;
        cin >> sh;
        applyShearing(sh, axis);
        break;
        }
        default:
            cout << "Invalid option" << endl;
            break;
    }
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutInitWindowPosition(100, 100);
    glutCreateWindow("Polygon Transformation");
    initialize();
    glutDisplayFunc(display);
    glutMainLoop();

    return 0;
}




